import json
import uuid
import random
import asyncio
from datetime import datetime, date
from typing import Dict, List
from contextlib import asynccontextmanager
from urllib.parse import urlparse

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

from analysis import (
    AnalysisTransactionStatus,
    GetResultsResponse,
    GetVacanciesResponse,
    ProcessResumesRequest,
    ProcessResumesResponse,
    Resume,
    ResumeDetailResponse,
    Transaction,
    TransactionResumeLink,
    AllAnalysisResultsResponse,
    AnalysisFlag,
    Legend,
    Legends,
    AnalysisStatus,
    AnalysisStatus,
)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è preview —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
class PreviewResponse(BaseModel):
    processed: int
    total: int
    results: List[ResumeDetailResponse]

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan event handler"""
    # Startup
    load_demo_resumes()
    load_demo_vacancies()
    yield
    # Shutdown (if needed)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="WolfEye Mock Backend",
    description="–ú–æ–∫-–±—ç–∫–µ–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ",
    version="1.0.0",
    lifespan=lifespan
)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
transactions: Dict[str, Transaction] = {}
resumes: Dict[str, Resume] = {}
transaction_resume_links: List[TransactionResumeLink] = []
# –°–≤—è–∑—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏: {vacancy_id: [transaction_id1, transaction_id2, ...]}
vacancy_transactions: Dict[str, List[str]] = {}

# –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ JSON —Ñ–∞–π–ª–æ–≤)
DEMO_VACANCIES = []

# –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ (–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ sample_resumes)
DEMO_RESUMES = [
    {
        "id": "3c07ff2f000f4e880700bb41f0435345554a79",
        "url": "https://hh.ru/resume/3c07ff2f000f4e880700bb41f0435345554a79",
        "data": {}
    },
    {
        "id": "13db2fbf000df537aa00bb41f05063456f6a39",
        "url": "https://hh.ru/resume/13db2fbf000df537aa00bb41f05063456f6a39",
        "data": {}
    },
    {
        "id": "18c8bdbe000f4ab1d300bb41f0634b4a386c33",
        "url": "https://hh.ru/resume/18c8bdbe000f4ab1d300bb41f0634b4a386c33",
        "data": {}
    },
    {
        "id": "22f2b4ee000f56dc5b00bb41f0564e71743246",
        "url": "https://hh.ru/resume/22f2b4ee000f56dc5b00bb41f0564e71743246",
        "data": {}
    },
    {
        "id": "37cd74c9000f1a765200bb41f0323133427552",
        "url": "https://hh.ru/resume/37cd74c9000f1a765200bb41f0323133427552",
        "data": {}
    },
    {
        "id": "108b9793000f5a420900bb41f052543668456f",
        "url": "https://hh.ru/resume/108b9793000f5a420900bb41f052543668456f",
        "data": {}
    },
    {
        "id": "201217d6000f50c6c300bb41f0474747393845",
        "url": "https://hh.ru/resume/201217d6000f50c6c300bb41f0474747393845",
        "data": {}
    }  
]

def load_demo_resumes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
    global DEMO_RESUMES
    
    resume_files = [
        "3c07ff2f000f4e880700bb41f0435345554a79.json",
        "13db2fbf000df537aa00bb41f05063456f6a39.json",
        "18c8bdbe000f4ab1d300bb41f0634b4a386c33.json",
        "22f2b4ee000f56dc5b00bb41f0564e71743246.json",
        "37cd74c9000f1a765200bb41f0323133427552.json",
        "108b9793000f5a420900bb41f052543668456f.json",
        "201217d6000f50c6c300bb41f0474747393845.json"
    ]
    
    for i, filename in enumerate(resume_files):
        try:
            file_path = f"../sample_resumes/{filename}"
            print(f"Loading {filename}...")
            
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if not content:
                    print(f"Warning: File {filename} is empty, using empty data")
                    DEMO_RESUMES[i]["data"] = {}
                    continue
                
                data = json.loads(content)
                DEMO_RESUMES[i]["data"] = data
                print(f"Successfully loaded {filename}")
                
        except FileNotFoundError:
            print(f"Warning: File {filename} not found, using empty data")
            DEMO_RESUMES[i]["data"] = {}
        except json.JSONDecodeError as e:
            print(f"Error: Invalid JSON in {filename}: {e}")
            print(f"File content preview: {content[:100]}...")
            DEMO_RESUMES[i]["data"] = {}
        except Exception as e:
            print(f"Error loading {filename}: {e}")
            DEMO_RESUMES[i]["data"] = {}

def load_demo_vacancies():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
    global DEMO_VACANCIES
    
    vacancy_files = ["1.json", "2.json", "3.json"]
    
    for filename in vacancy_files:
        try:
            file_path = f"../vacancies/{filename}"
            print(f"Loading vacancy {filename}...")
            
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if not content:
                    print(f"Warning: File {filename} is empty, skipping vacancy")
                    continue
                
                data = json.loads(content)
                DEMO_VACANCIES.append(data)
                print(f"Successfully loaded vacancy {filename}")
                
        except FileNotFoundError:
            print(f"Warning: File {filename} not found, skipping vacancy")
        except json.JSONDecodeError as e:
            print(f"Error: Invalid JSON in {filename}: {e}")
            print(f"File content preview: {content[:100]}...")
        except Exception as e:
            print(f"Error loading {filename}: {e}")

def create_copy_legend(original_legend: Legend, resume_data: dict) -> Legend:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é –ª–µ–≥–µ–Ω–¥—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ä–µ–∑—é–º–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è "–∫–æ–ø–∏–∏"
    other_resumes = [r for r in DEMO_RESUMES if r["id"] != resume_data.get("id", "")]
    
    if other_resumes:
        # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è "–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
        random_resume = random.choice(other_resumes)
        if random_resume["data"] and "experience" in random_resume["data"]:
            other_experience = random_resume["data"]["experience"]
            if other_experience:
                other_exp = random.choice(other_experience)
                other_company = other_exp.get("company", original_legend.company_name)
                other_position = other_exp.get("position", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
                
                # –°–æ–∑–¥–∞–µ–º "–∫–æ–ø–∏—é" —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∑—é–º–µ
                copy_legend = Legend(
                    company_name=other_company,
                    start_date=original_legend.start_date,
                    end_date=original_legend.end_date,
                    legend_text=f"{other_position} –≤ {other_company}"
                )
                return copy_legend
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ä–µ–∑—é–º–µ, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–ø–∏—é
    return Legend(
        company_name=original_legend.company_name,
        start_date=original_legend.start_date,
        end_date=original_legend.end_date,
        legend_text=original_legend.legend_text
    )

def extract_resume_id_from_url(url: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ä–µ–∑—é–º–µ –∏–∑ URL"""
    parsed = urlparse(url)
    path_parts = parsed.path.strip('/').split('/')
    if len(path_parts) >= 2 and path_parts[0] == 'resume':
        return path_parts[1]
    return str(uuid.uuid4())

async def process_resumes_background(transaction_id: str, urls: List[str]):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ"""
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}")
    print(f"üìã URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {urls}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ –∏ —Å–≤—è–∑–∏
        new_links = []
        
        for url in urls:
            resume_id = extract_resume_id_from_url(str(url))
            print(f"  üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL: {url} -> ID: {resume_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Ä–µ–∑—é–º–µ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
            if resume_id not in resumes:
                print(f"  üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ {resume_id}")
                # –ò—â–µ–º –≤ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
                demo_resume = next((r for r in DEMO_RESUMES if r["id"] == resume_id), None)
                if demo_resume:
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {demo_resume['id']}")
                    resume_data = Resume(
                        id=resume_id,
                        url=str(url),
                        data=demo_resume["data"],
                        status="pending"
                    )
                else:
                    print(f"  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ")
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
                    resume_data = Resume(
                        id=resume_id,
                        url=str(url),
                        status="pending"
                    )
                resumes[resume_id] = resume_data
                print(f"  üìä –°—Ç–∞—Ç—É—Å —Ä–µ–∑—é–º–µ: {resume_data.status}")
            else:
                print(f"  ‚ôªÔ∏è –†–µ–∑—é–º–µ {resume_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è-—Ä–µ–∑—é–º–µ
            link = TransactionResumeLink(
                transaction_id=transaction_id,
                resume_id=resume_id
            )
            transaction_resume_links.append(link)
            new_links.append(link)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(new_links)} —Ä–µ–∑—é–º–µ...")
        for i, link in enumerate(new_links):
            resume_id = link.resume_id
            if resume_id in resumes:
                resume = resumes[resume_id]
                print(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ {i+1}/{len(new_links)}: {resume_id}")
                print(f"  üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {resume.status}")
                
                # –≠–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ - 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∫–∞–∂–¥–æ–µ —Ä–µ–∑—é–º–µ
                print(f"  ‚è∞ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(3)
                
                if resume.data:
                    try:
                        processed_data = process_resume_data(resume.data)
                        resume.processed_data = processed_data
                        resume.status = "completed"
                        print(f"‚úÖ –†–µ–∑—é–º–µ {resume_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        resume.status = "failed"
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ {resume_id}: {e}")
                        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è failed —Ä–µ–∑—é–º–µ
                        try:
                            processed_data = ResumeDetailResponse(
                                resume_id=resume_id,
                                score=30,  # –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è failed —Ä–µ–∑—é–º–µ
                                fl_name="Error",
                                experience_months=0,
                                flags=[AnalysisFlag(name="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", fact=str(e))],
                                years_old=25,
                                salary=0,
                                legends=[]
                            )
                            resume.processed_data = processed_data
                            resume.status = "completed"  # –ú–µ–Ω—è–µ–º –Ω–∞ completed —á—Ç–æ–±—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
                            print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è failed —Ä–µ–∑—é–º–µ {resume_id}")
                        except Exception as e2:
                            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e2}")
                else:
                    # –î–ª—è —Ä–µ–∑—é–º–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    try:
                        processed_data = ResumeDetailResponse(
                            resume_id=resume_id,
                            score=50,  # –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                            fl_name="Unknown",
                            experience_months=0,
                            flags=[AnalysisFlag(name="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", fact="–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö")],
                            years_old=25,
                            salary=50000,
                            legends=[]
                        )
                        resume.processed_data = processed_data
                        resume.status = "completed"
                        print(f"‚úÖ –†–µ–∑—é–º–µ {resume_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)")
                    except Exception as e:
                        resume.status = "failed"
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {resume_id}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏)
        linked_resume_ids = [link.resume_id for link in new_links]
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}")
        print(f"  üìã –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ: {linked_resume_ids}")
        
        for resume_id in linked_resume_ids:
            if resume_id in resumes:
                resume = resumes[resume_id]
                print(f"  üìÑ –†–µ–∑—é–º–µ {resume_id}: {resume.status}")
        
        all_completed = all(
            resumes[resume_id].status == "completed" 
            for resume_id in linked_resume_ids 
            if resume_id in resumes
        )
        print(f"  ‚úÖ –í—Å–µ —Ä–µ–∑—é–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {all_completed}")
        
        if all_completed and linked_resume_ids:
            transactions[transaction_id].status = "completed"
            transactions[transaction_id].completed_at = datetime.now()
            print(f"üéâ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {transactions[transaction_id].status}")
            print(f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {transactions[transaction_id].completed_at}")
        else:
            print(f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            print(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {transactions[transaction_id].status}")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ {transaction_id}: {e}")
        if transaction_id in transactions:
            transactions[transaction_id].status = "failed"

# –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–∫-—Å–∏—Å—Ç–µ–º–∞



def get_mock_score_and_flags(resume_id: str) -> tuple[int, list[AnalysisFlag]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ"""
    
    # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—é–º–µ
    mock_data = {
        "13db2fbf000df537aa00bb41f05063456f6a39": {  # –û–ª–µ–≥ –£—Å—Ç–∏–Ω–æ–≤
            "score": 85,
            "flags": [
                AnalysisFlag(
                    name="–†–µ–∑—é–º–µ –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ", 
                    fact="–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞–∫—Ä—É—Ç–∫–∏. –í—Å–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –Ω–æ—Ä–º–µ."
                )
            ]
        },
        "108b9793000f5a420900bb41f052543668456f": {  # –ò–ª—å—è –í–æ—Ä–æ–±—å–µ–≤
            "score": 45,
            "flags": [
                AnalysisFlag(
                    name="–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞", 
                    fact="–í–æ–∑—Ä–∞—Å—Ç 23 –≥–æ–¥–∞, –Ω–æ –æ–ø—ã—Ç 61 –º–µ—Å—è—Ü. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–∫—Ä—É—Ç–∫–∞ –æ–ø—ã—Ç–∞."
                ),
                AnalysisFlag(
                    name="–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º", 
                    fact="–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã."
                )
            ]
        },
        "18c8bdbe000f4ab1d300bb41f0634b4a386c33": {  # –ê–Ω—Ç–æ–Ω –ù–∞–∑–∞—Ä–æ–≤
            "score": 72,
            "flags": [
                AnalysisFlag(
                    name="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏", 
                    fact="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã."
                )
            ]
        },
        "201217d6000f50c6c300bb41f0474747393845": {  # –ö–∏—Ä–∏–ª–ª –î–∞–≥–¥–∞–Ω—á–∞
            "score": 65,
            "flags": [
                AnalysisFlag(
                    name="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏", 
                    fact="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã."
                )
            ]
        },
        "22f2b4ee000f56dc5b00bb41f0564e71743246": {  # –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–∞–Ω–∞—Ä–∏–Ω
            "score": 55,
            "flags": [
                AnalysisFlag(
                    name="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏", 
                    fact="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã."
                )
            ]
        },
        "37cd74c9000f1a765200bb41f0323133427552": {  # –î–º–∏—Ç—Ä–∏–π –ú–æ–ª–æ—á–Ω–∏–∫–æ–≤
            "score": 55,
            "flags": [
                AnalysisFlag(
                    name="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏", 
                    fact="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã."
                )
            ]
        },
        "3c07ff2f000f4e880700bb41f0435345554a79": {  # –ù–æ–≤–∏–∫–æ–≤ –ê—Ä—Ç–µ–º
            "score": 55,
            "flags": [
                AnalysisFlag(
                    name="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏", 
                    fact="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã."
                )
            ]
        }
    }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    data = mock_data.get(resume_id, {
        "score": 50,
        "flags": [
            AnalysisFlag(
                name="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ", 
                fact="–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö."
            )
        ]
    })
    
    return data["score"], data["flags"]

def process_resume_data(resume_data: dict) -> ResumeDetailResponse:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏ —Å–æ–∑–¥–∞–µ—Ç ResumeDetailResponse"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    resume_id = resume_data.get("id", "")
    first_name = resume_data.get("first_name", "")
    last_name = resume_data.get("last_name", "")
    fl_name = f"{first_name[0]}. {last_name}" if first_name and last_name else "Unknown"
    
    # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –º–µ—Å—è—Ü–∞—Ö
    total_experience = resume_data.get("total_experience", {})
    experience_months = total_experience.get("months", 0) if total_experience else 0
    
    # –í–æ–∑—Ä–∞—Å—Ç
    age = resume_data.get("age", 25)
    if age is None:
        age = 25  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    
    # –ó–∞—Ä–ø–ª–∞—Ç–∞
    salary = resume_data.get("salary", 0)
    if salary is None:
        salary = 0  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ
    score, flags = get_mock_score_and_flags(resume_id)
    
    # –°–æ–∑–¥–∞–µ–º –ª–µ–≥–µ–Ω–¥—ã (–º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã)
    legends = []
    experience = resume_data.get("experience", [])
    for i, exp in enumerate(experience[:2]):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
        company = exp.get("company", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è")
        position = exp.get("position", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        start_date = exp.get("start", "")
        end_date = exp.get("end", "")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
        description = exp.get("description", "")
        if description:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è legend_text
            short_desc = description[:100] + "..." if len(description) > 100 else description
            legend_text = f"{position} –≤ {company}. {short_desc}"
        else:
            legend_text = f"{position} –≤ {company}"
        
        original_legend = Legend(
            company_name=company,
            start_date=datetime.strptime(start_date, "%Y-%m-%d").date() if start_date else None,
            end_date=datetime.strptime(end_date, "%Y-%m-%d").date() if end_date else None,
            legend_text=legend_text
        )
        
        # –ö–∞–∂–¥–∞—è –≤—Ç–æ—Ä–∞—è –ª–µ–≥–µ–Ω–¥–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç original_legend —Å similarity 80-100
        if i % 2 == 1:  # –í—Ç–æ—Ä–∞—è –ª–µ–≥–µ–Ω–¥–∞ (–∏–Ω–¥–µ–∫—Å 1)
            # –°–æ–∑–¥–∞–µ–º "–∫–æ–ø–∏—é" —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            copy_legend = create_copy_legend(original_legend, resume_data)
            similarity = random.randint(80, 100)
            legends.append(Legends(original_legend=original_legend, copy_legend=copy_legend, similarity=similarity))
        else:  # –ü–µ—Ä–≤–∞—è –ª–µ–≥–µ–Ω–¥–∞ (–∏–Ω–¥–µ–∫—Å 0)
            legends.append(Legends(original_legend=original_legend, similarity=95))
    
    # –†–µ–π—Ç–∏–Ω–≥ —É–∂–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –≤—ã—à–µ
    
    return ResumeDetailResponse(
        resume_id=resume_id,
        score=score,
        fl_name=fl_name,
        experience_months=experience_months,
        flags=flags,
        years_old=age,
        salary=salary,
        legends=legends
    )


@app.get("/vacancies", response_model=List[GetVacanciesResponse])
async def get_vacancies():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π"""
    result = []
    for vacancy in DEMO_VACANCIES:
        vacancy_id = vacancy["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancy_transaction_ids = vacancy_transactions.get(vacancy_id, [])
        last_transaction_id = ""
        
        if vacancy_transaction_ids:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            latest_transaction = None
            for transaction_id in vacancy_transaction_ids:
                if transaction_id in transactions:
                    transaction = transactions[transaction_id]
                    if latest_transaction is None or transaction.created_at > latest_transaction.created_at:
                        latest_transaction = transaction
            
            if latest_transaction:
                last_transaction_id = latest_transaction.id
        
        result.append(GetVacanciesResponse(
            name=vacancy["title"],
            transaction_id=last_transaction_id,  # ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            count_respondents=vacancy["count_respondents"]
        ))
    return result

@app.post("/process_resumes", response_model=ProcessResumesResponse)
async def process_resumes(request: ProcessResumesRequest, background_tasks: BackgroundTasks):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    transaction_id = str(uuid.uuid4())
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            id=transaction_id,
            name=request.name,
            status="processing",
            created_at=datetime.now()
        )
        transactions[transaction_id] = transaction
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫ —Å–ª—É—á–∞–π–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ (–¥–ª—è –¥–µ–º–æ)
        if DEMO_VACANCIES:
            random_vacancy = random.choice(DEMO_VACANCIES)
            vacancy_id = random_vacancy["id"]
            if vacancy_id not in vacancy_transactions:
                vacancy_transactions[vacancy_id] = []
            vacancy_transactions[vacancy_id].append(transaction_id)
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ
        print(f"üöÄ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}")
        background_tasks.add_task(process_resumes_background, transaction_id, request.urls)
        
        print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id} —Å–æ–∑–¥–∞–Ω–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ")
        return ProcessResumesResponse(transaction_id=transaction_id)
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if transaction_id in transactions:
            del transactions[transaction_id]
        raise HTTPException(status_code=500, detail=f"Error creating transaction: {str(e)}")

@app.get("/results/{transaction_id}", response_model=GetResultsResponse)
async def get_results(transaction_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    if transaction_id not in transactions:
        raise HTTPException(status_code=404, detail="Transaction not found")
    
    transaction = transactions[transaction_id]
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ–∑—é–º–µ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    linked_resume_ids = [
        link.resume_id for link in transaction_resume_links 
        if link.transaction_id == transaction_id
    ]
    
    results = []
    for resume_id in linked_resume_ids:
        if resume_id in resumes:
            resume = resumes[resume_id]
            if resume.processed_data:
                results.append(resume.processed_data)
    
    # –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ–Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    # –ó–¥–µ—Å—å –º—ã —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    
    return GetResultsResponse(
        transaction_id=transaction_id,
        status=transaction.status,
        created_at=transaction.created_at,
        completed_at=transaction.completed_at,
        results=results
    )

@app.get("/all_results", response_model=AllAnalysisResultsResponse)
async def get_all_results():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    results = []
    print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –í—Å–µ–≥–æ: {len(transactions)}")
    
    for transaction in transactions.values():
        print(f"  üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction.id}: {transaction.status} (–∑–∞–≤–µ—Ä—à–µ–Ω–∞: {transaction.completed_at})")
        results.append(AnalysisTransactionStatus(
            transaction_id=transaction.id,
            name=transaction.name,
            status=transaction.status,
            created_at=transaction.created_at,
            completed_at=transaction.completed_at
        ))
    
    return AllAnalysisResultsResponse(results=results)

@app.get("/preview/{transaction_id}", response_model=PreviewResponse)
async def get_preview(transaction_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    if transaction_id not in transactions:
        raise HTTPException(status_code=404, detail="Transaction not found")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ–∑—é–º–µ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    linked_resume_ids = [
        link.resume_id for link in transaction_resume_links 
        if link.transaction_id == transaction_id
    ]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ
    processed_count = 0
    results = []
    
    print(f"üîç Preview –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}")
    print(f"  üìã –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ: {linked_resume_ids}")
    
    for resume_id in linked_resume_ids:
        if resume_id in resumes:
            resume = resumes[resume_id]
            print(f"  üìÑ –†–µ–∑—é–º–µ {resume_id}: —Å—Ç–∞—Ç—É—Å={resume.status}, processed_data={'–µ—Å—Ç—å' if resume.processed_data else '–Ω–µ—Ç'}")
            if resume.status == "completed" and resume.processed_data:
                processed_count += 1
                results.append(resume.processed_data)
    
    return PreviewResponse(
        processed=processed_count,
        total=len(linked_resume_ids),
        results=results
    )


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
