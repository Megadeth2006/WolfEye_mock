#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π API:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ JSON
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ copy_legend
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
"""

import requests
import json
import time

BASE_URL = "http://localhost:8000"

def test_vacancies():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∞–∫–∞–Ω—Å–∏–π...")
    
    try:
        response = requests.get(f"{BASE_URL}/vacancies")
        if response.status_code == 200:
            vacancies = response.json()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
            
            for vacancy in vacancies:
                print(f"  üìã {vacancy['name']} - {vacancy['count_respondents']} –æ—Ç–∫–ª–∏–∫–æ–≤")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_resume_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ —Å copy_legend"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—é–º–µ...")
    
    # URL —Ä–µ–∑—é–º–µ –∏–∑ sample_resumes
    resume_urls = [
        "https://hh.ru/resume/13db2fbf000df537aa00bb41f05063456f6a39",
        "https://hh.ru/resume/108b9793000f5a420900bb41f052543668456f"
    ]
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        response = requests.post(f"{BASE_URL}/process_resumes", json={
            "name": "–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π API",
            "urls": resume_urls
        })
        
        if response.status_code == 200:
            data = response.json()
            transaction_id = data["transaction_id"]
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {transaction_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º preview —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º preview —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º...")
            preview_response = requests.get(f"{BASE_URL}/preview/{transaction_id}")
            if preview_response.status_code == 200:
                preview = preview_response.json()
                print(f"  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {preview['processed']}/{preview['total']} —Ä–µ–∑—é–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
            # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∫–∞–∂–¥–æ–µ —Ä–µ–∑—é–º–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è 3 —Å–µ–∫—É–Ω–¥—ã)
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ (6 —Å–µ–∫—É–Ω–¥)...")
            time.sleep(7)  # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —á–µ–º 6 —Å–µ–∫—É–Ω–¥ –¥–ª—è 2 —Ä–µ–∑—é–º–µ
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º preview –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            preview_response = requests.get(f"{BASE_URL}/preview/{transaction_id}")
            if preview_response.status_code == 200:
                preview = preview_response.json()
                print(f"  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {preview['processed']}/{preview['total']} —Ä–µ–∑—é–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results_response = requests.get(f"{BASE_URL}/results/{transaction_id}")
            if results_response.status_code == 200:
                results = results_response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {len(results['results'])} —Ä–µ–∑—é–º–µ")
                print(f"  üìä –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {results['status']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º copy_legend
                for result in results["results"]:
                    print(f"\nüìÑ –†–µ–∑—é–º–µ: {result['fl_name']}")
                    print(f"  üè¢ –õ–µ–≥–µ–Ω–¥—ã:")
                    
                    for i, legend in enumerate(result["legends"]):
                        print(f"    {i+1}. –û—Ä–∏–≥–∏–Ω–∞–ª: {legend['original_legend']['company_name']}")
                        if legend.get("copy_legend"):
                            print(f"       –ö–æ–ø–∏—è: {legend['copy_legend']['company_name']} (similarity: {legend['similarity']}%)")
                        else:
                            print(f"       –ö–æ–ø–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_response.status_code}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ: {e}")
        return False

def test_vacancy_transactions():
    """–¢–µ—Å—Ç —Å–≤—è–∑–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        response = requests.get(f"{BASE_URL}/vacancies")
        if response.status_code == 200:
            vacancies = response.json()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
            
            for vacancy in vacancies:
                print(f"  üìã {vacancy['name']}")
                print(f"     üë• –û—Ç–∫–ª–∏–∫–æ–≤: {vacancy['count_respondents']}")
                print(f"     üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(vacancy['all_transactions'])}")
                
                for transaction in vacancy['all_transactions']:
                    print(f"       - {transaction['name']} ({transaction['status']})")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π API...")
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(3)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
    vacancies_ok = test_vacancies()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    transactions_ok = test_vacancy_transactions()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—é–º–µ
    resumes_ok = test_resume_processing()
    
    # –ò—Ç–æ–≥–∏
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  –í–∞–∫–∞–Ω—Å–∏–∏: {'‚úÖ' if vacancies_ok else '‚ùå'}")
    print(f"  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {'‚úÖ' if transactions_ok else '‚ùå'}")
    print(f"  –†–µ–∑—é–º–µ: {'‚úÖ' if resumes_ok else '‚ùå'}")
    
    if vacancies_ok and transactions_ok and resumes_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    main()
